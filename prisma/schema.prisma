// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  password       String?
  registeredName String?
  mobile         String?
  address        String?
  emailVerified  DateTime? @map("email_verified")
  sensor         Sensor?   @relation(fields: [sensorId], references: [id])
  image          String?
  role           Role      @default(USER)
  accounts       Account[]
  sessions       Session[]
  sensorId       String?
  userIssues     Issue[]   @relation(name: "user_issues")
  assignedIssues Issue[]   @relation(name: "assigned_issues")

  @@map("users")
}

model Sensor {
  id        String   @id @default(cuid())
  name      String
  latitude  String?
  longitude String?
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

enum Role {
  USER
  MANAGER
  TECHNICIAN
  ADMIN
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Issue {
  id           String      @id @default(cuid())
  title        String?
  description  String?
  location     Json?
  status       IssueStatus @default(OPEN)
  closedAt     DateTime?
  assignedTo   User?       @relation(name: "assigned_issues", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId String?
  assignedAt   DateTime?
  otp          String?
  feedback     Int?
  userId       String
  user         User        @relation(name: "user_issues", fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum IssueStatus {
  OPEN
  VERIFY
  CLOSE
}
